@startuml classDiagram
skinparam linetype polyline
skinparam linetype ortho
top to bottom direction

package App
{
    class "MainTask" 
    {
        + MainTask_init(void) : MainTask_Ret
    }
    
    class StateHandler
    {
        -gCurrentState: States
        -gProcessedEntryFunction: Bool
        -gErrorCode: ErrorHandlerErrorCode
        +stateHandler(void): void
    }

    enum States
    {
        INITIALIZATION_STATE,
        READY_STATE,
        CALIBRATION_STATE,
        PARAMETER_SET_STATE,
        SEARCHING_STARTLINE_STATE,
        DRIVE_LAP_STATE,
        LAP_FINISHED_STATE,
        SEARCH_TRACK_STATE,
        ERROR_STATE,
        PRE_DRIVE_STATE,
    }

    class Parameters
    {
        -gParameterSets: ParameterSet[MAX_NUMBER_OF_PARAMETER_SETS]
        -gParameters: ParameterSet*
        +getParamterSet(void): ParameterSet*
        +setParameterSet(UInt8): void
        +displayParameterSets(void): void
        +initParameterSets(void): void
    }

    struct ParameterSet
    {
        kp: Float32
        kd: Float32
        ki: Float32
        motorspeed: Int16
    }

    class PositionControl
    {
        -gSensorValues: LineSensorValues
        -calcMovingAverage(Int16): Int16
        +updateSensorValues(void): void
        +driveOnTrack(void): void
        +checkForStartline(void): Bool
        +checkForLineLost(void): Bool
    }

    class GlobalTimers
    {
        -gTimer1: SoftTimer
        -gTimer2: SoftTimer
        -gTimer3: SoftTimer
        -gTimers[3]: SoftTimer*
        +getTimer(UInt8): SoftTimer*
    }

    package StatesPackage
    {
        class ReadyState
        {
            -gButtonATriggered: Bool
            -gButtonBTriggered: Bool
            -gButtonCTriggered: Bool
            +enterDisplayState(void): void
            +processPollingButtons(void): void
            +checkTransitionTriggerButtonAPressed(void): Bool
            +checkTransitionTriggerButtonBPressed(void): Bool
            +checkTransitionTriggerButtonCPressed(void): Bool
        }

        class InitializationState
        {
            +enterDisplayNameAndStartTimer1(void): void
            +exitStopTimer1(void): void
            +checkTransitionTriggerTimer1Exceeds2s(void): Bool
        }

        class PreDriveState
        {
            +enterStartTimer1AndWaitFor3s(void): void
            +exitStopTimer1(void): void
            +checkTransitionTriggerTimer1Exceeds3s(void): Bool
        }


        class SearchingStartLineState
        {
            -gStartlineDetected: Bool
            +enterStartTimer1AndStartDriving(void): void
            +processSearchForStartline(void): void
            +exitStartTimer2AndPlayBeepIfTrackFound(void): void
            +checkTransitionTriggerStartlineFound(void): Bool
            +checkTransitionTriggerTimer1Exceeds8s(void): Bool
        }

        class LapFinishedState
        {
            -gButtonAPressed: Bool
            +enterDisplayTimeAndStopDriveAndPlayBeep(void): void
            +processPollingButtonA(void): void
            +checkTransitionTriggerButtonAPressed(void): Bool
        }

        class DriveLapState
        {
            -gTrackLeft: Bool
            +enterStartTimer3(void): void
            +processDriveOnTrackline(void): void
            +checkTransitionTriggerTimer2Exceeds20s(void): Bool
            +checkTransitionTriggerTrackNotFound(void): Bool
            +checkTransitionTriggerStartlineFound(void): Bool
        }

        class ParameterSetState
        {
            -gButtonTriggered: Bool
            +enterDisplayParameterSets(void): void
            +processSetParamterSet(void): void
            +exitDisplaySelectedParameterSetFor3s(void): void
            +checkTransitionTriggerConfigDone(void): Bool
        }

        class ErrorState
        {
            -gButtonTriggered: Bool
            +enterStopDriveAndPlayAlarmAndDisplayError(ErrorHandlerErrorCode): void
            +processPollingButtonA(void): void
            +checkTransitionTriggerButtonAPressed(void): Bool
        }

        class CalibrationState
        {
            -gState: CalibrationStates
            -gCalibrationFinished: Bool
            -gCalibrationTimeoutMessage: UInt8
            -gCenterLineTimeoutMessage: UInt8
            +processCalibrate(void): void
            +checkTransitionTriggerCalibrationDone(void): Bool
        }

        enum CalibrationStates
        {
            CALIBRATION_STATE_INIT,
            CALIBRATION_STATE_TURN_RIGHT_UNTIL_LEFT_SENSOR,
            CALIBRATION_STATE_TURN_LEFT_UNTIL_RIGHT_SENSOR,
            CALIBRATION_STATE_CENTER_ON_LINE,
            CALIBRATION_STATE_TIMEOUT_CALIBRATION,
            CALIBRATION_STATE_TIMEOUT_CENTER_LINE,
            CALIBRATION_STATE_FINISHED
        }
    }
}

package Service
{
    class Button {
        + Button_init(void) : void
        + Button_getState(ButtonID) : ButtonState
    }

    class Buzzer {
        + Buzzer_init(void) : void
        + Buzzer_beep(BuzzerID) : void
    }

    class Display {
        + Display_init(void) : void
        + Display_clear(void) : void
        + Display_clearLine(void) : void
        + Display_home(void) : void
        + Display_gotoxy(UInt8, UInt8) : void
        + Display_write(char*, UInt8) : void
        + Display_writeBar(UInt8) : void
    }

    class LED {
        + Led_init(void) : void
        + Led_switchOn(Led_Led) : void
        + Led_switchOff(Led_Led) : void
    }

    class DriveControl {
        + DriveControl_init(void) : void
        + DriveControl_drive(DriveControlMotorID, UInt8, DriveControl_Direction) : void
        + DriveControl_getMileage(void) : Int32
        + DriveControl_resetMileage(void) : void
    }

    class LineSensor {
        + LineSensor_init(void) : void
        + LineSensor_startCalibration(void) : void
        + LineSensor_stopCalibration(void) : void
        + LineSensor_getCalibrationState(void) : bool
        + LineSensor_read(LineSensorValues*) : void
        + LineSensor_enableEmitter(void)
        + LineSensor_disableEmitter(void) : void
    }

}

package Hal
{
    class GPIO{
        + Gpio_init(void) : Gpio_Ret
        + Gpio_write(Gpio_ID, Gpio_State) : Gpio_Ret
        + Gpio_read(Gpio_ID, Gpio_State* : Gpio_Ret
        + Gpio_alloc(Gpio_ID, UInt8*) : Gpio_Ret
        + Gpio_free(Gpio_ID, UInt8) : Gpio_Ret
    }
    class PWM{
        + Pwm_init(void) : void
        + Pwm_setDutyCycle(PwmID, UInt8) : void
    }
    class TickTimer{
        + TickTimer_init(void) : void
        + TickTimer_setCallback(TimerTickCallback) : void
        + TickTimer_get(void) : UInt64
        + TickTimer_delay(UInt8) : void
    }
    class IRQ{
        + Irq_init(void) : void
        + Irq_enable(IrqID) : void
        + Irq_disable(IrqID) : void
        + Irq_setCallback(IrqID, IrqCallback) : void
    }
}

package "OS" #DDDDDD {
    class Scheduler {
        + Scheduler_init(void) : SchedulerRet
        + Scheduler_execute(void) : void
        + Scheduler_addTask(Task*) : Scheduler_Ret
        + Scheduler_removeTask(Task*) : Scheduler_Ret
    }

    class Task {
        + Task_init(Task*, TaskWorkCallback, TaskState, void*) : Task_Ret
    }

    class SoftTimer{
        + SoftTimer_init(SoftTimer*) : void
        + SoftTimer_start(SoftTimer*, UInt16) : SoftTimer_Ret
        + SoftTimer_Stop(SoftTImer*) : SoftTimer_Ret
        + SoftTimer_Update(SoftTimer*) : void
        + SoftTimer_restart(SoftTimer*) : SoftTimer_Ret
        + SoftTimer_get(SoftTimer*) : UInt16
        + SoftTimerHandler_init(void) : void
        + SoftTimerHandler_register(SoftTimer*) : SoftTimer_Ret
        + SoftTimerHandler_unRegister(SoftTimer*) : SoftTimer_Ret
        + SoftTimerHandler_update(void) : void
        + SoftTimer_getTimeStampMs(void) : UInt64
    }

    class ErrorHandler {
        + ErrorHandler_show(ErrorHandlerErrorCode) : void
        + ErrorHandler_halt(ErrorHandlerErrorCode) : void
        + ErrorHandler_setErrorCallback(ErrorCallback) : void
        + ErrorHandler_setPrintCallback(PrintCallback) : void
    }


' ++++++++++++++++++++++++++++++++
' App
MainTask ..> StateHandler

Scheduler <.up.. MainTask : register

StateHandler ..d..> InitializationState
StateHandler ..d..> ReadyState
StateHandler ..d..> CalibrationState
StateHandler ..d..> ParameterSetState
StateHandler ..d..> SearchingStartLineState
StateHandler ..d..> DriveLapState
StateHandler ..d..> LapFinishedState
StateHandler ..d..> SearchTrackState
StateHandler ..d..> ErrorState
StateHandler ..d..> PreDriveState
StateHandler ...> States

Parameters ..d..> Display
Parameters ..> ParameterSet

InitializationState ..d..........> Display
InitializationState ..d..........> GlobalTimers
InitializationState ..d..........> Parameters

ReadyState ..d....> Button
ReadyState ..d....> Display

PreDriveState ..d....> GlobalTimers
PreDriveState ..d....> Display

CalibrationState ..d........> LineSensor
CalibrationState ..d.....> DriveControl
CalibrationState ..d.....> GlobalTimers
CalibrationState ..d.....> Display
CalibrationState ..d.....> CalibrationStates

ParameterSetState ..d....> Button
ParameterSetState .......> Parameters
ParameterSetState ..d.....> GlobalTimers

SearchingStartLineState ..d.....> SoftTimer
SearchingStartLineState ..d.....> GlobalTimers
SearchingStartLineState ..d.....> Buzzer
SearchingStartLineState ..d.....> Display
SearchingStartLineState ..d.....> PositionControl

DriveLapState ..d.....> Buzzer
DriveLapState ......> Parameters
DriveLapState ..d....> DriveControl
DriveLapState ..d.....> LineSensor
DriveLapState ..d.....> GlobalTimers
DriveLapState ..d.....> PositionControl

TrackFunctions ...d...> LineSensor
TrackFunctions ...d..> DriveControl

LapFinishedState ..d..> Button
LapFinishedState ..d.......> Buzzer
LapFinishedState ..d....> DriveControl
LapFinishedState ..d....> GlobalTimers
LapFinishedState ..d....> Display

ErrorState ..d....> Buzzer
ErrorState ..d....> Display
ErrorState ..d.....> Button
ErrorState ..d.....> DriveControl
ErrorState ..d.....> ErrorHandler

PreDriveState ..d..> SoftTimer

GlobalTimers ..d..> SoftTimer

PositionControl ..d..> LineSensor
PositionControl ..d..> DriveControl
PositionControl ..d..> Parameters
PositionControl ..d..> GlobalTimers

' ++++++++++++++++++++++++++++++++
' Service

Button ....> GPIO
Button ..> SoftTimer

Buzzer ....> PWM
Buzzer ....> SoftTimer

Display ..> GPIO
Display ....> TickTimer
Display ..> ErrorHandler

DriveControl .....> GPIO
DriveControl ..> PWM
DriveControl ..> IRQ

LED ..> GPIO

LineSensor ..> SoftTimer
LineSensor ..> GPIO
LineSensor ..> TickTimer
LineSensor .r.> Display

' ++++++++++++++++++++++++++++++++
' OS

' ErrorHandler ..> HAL

SoftTimer ..> TickTimer

Scheduler ..> Task
Scheduler ..> IRQ


@enduml